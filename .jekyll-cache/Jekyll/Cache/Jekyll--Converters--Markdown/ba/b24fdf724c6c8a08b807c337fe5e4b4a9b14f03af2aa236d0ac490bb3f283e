I"Ä<p>Interfaces funcionais s√£o o cora√ß√£o dos recursos do lambda, no java 8 qualquer interface que contenha um m√©todo abstrato pode ser invocado como uma express√£o lambda.</p>

<p>Um exemplo de classe que podemos invocar no java 8 como express√µes lambda √© o Comparator, como no exemplo abaixo da sua escrita.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>interface Comparator,&lt;T&gt; {
    boolean compare(T t);
}
</code></pre></div></div>

<p>A interface Comparator tem apenas um m√©todo abstrato e √© isso que faz ele ter os recursos do lambda.
S√≥ para lembrar, todo m√©todo em uma interface por padr√£o s√£o P√∫blicos e Abstratos.</p>

<p>Criando uma Interface Funcional</p>

<p>Primeiro vamos criar nossa interface gen√©rica e dar a ela apenas um m√©todo que vou chamar de transforma(T t), quem for usar esse m√©todo √© quem vai determinar qual o comportamento do mesmo.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public interface Transformador&lt;T&gt; {
        String transforma(T t);
}
</code></pre></div></div>

<p>Agora que temos nossa interface, vamos implementar e determinar seu comportamento.</p>

<p>O comportamento do m√©todo transforma(T t) da interface Transformador vai ser receber uma String e retornar a mesma como mai√∫scula, apenas isso para exemplificar o uso da nossa Interface funcional.</p>

<p>Ent√£o abaixo podemos fazer assim:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Transformador&lt;String&gt; transfNomeEmMaiusculo = valor -&gt; {
          return valor.toUpperCase();
};
System.out.println(transfNomeEmMaiusculo.transforma("athos bonner"));
</code></pre></div></div>

<p>O que fiz foi apenas chamar a nossa interface e usar a express√£o lambda: valor -&gt; {} para determinar qual o comportamento do m√©todo, ent√£o apenas usei o toUpperCase para transformar toda a String passada para mai√∫scula e em seguida imprimir o retorno em um System.out passando meu nome.</p>

<p>Simples assim!</p>

<p>Ai voc√™ me pergunta‚Ä¶. Mas Athos, ent√£o quer dizer que uma interface funcional s√≥ pode ter apenas um m√©todo ? como assim, bial ???</p>

<p>Isso mesmo, uma interface funcional precisa ter apenas um m√©todo, Como exemplo as interfaces: java.util.Comparator, java.lang.Runnable , java.util.concurrent.Callable.</p>

<p>Mas e se eu criar dois m√©todos nesta mesma interface ir√° dar erro ?</p>

<p>N√£o, por√©m ela n√£o ir√° ser mais uma interface funcional e voc√™ n√£o vai poder usar as express√µes lambda que nosso querido java 8 nos presenteou.</p>

<p>Mas Athos, eu posso impedir que o estagi√°rio mude minha interface sem querer ???</p>

<p>Claro que sim!</p>

<p>Voc√™ pode usar a anota√ß√£o @FunctionalInterface para impedir que essa interface n√£o permita que criem mais de um m√©todo.</p>

<p>Exemplo, nossa Interface Transformador ficou assim.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@FunctionalInterface
public interface Transformador&lt;T&gt; {
        String transforma(T t);
}
</code></pre></div></div>

<p>Apenas isso!</p>

<p>A partir de agora se voc√™ tiver usando alguma IDE e tentar criar mais um m√©todo nessa interface ir√° receber esse erro.</p>

<p><img src="/athosbonner.github.io/assets/img/erro_interface_funcional.png" alt="I and My friends" /></p>

<p>e se tentar compilar vai recer esse erro.</p>

<p>java: Unexpected @FunctionalInterface annotation
Transformador is not a functional interface multiple non-overriding abstract methods found in interface</p>

<p>Bom espero ter ajudado!</p>

<p>See you later‚Ä¶.</p>

<p>Download dos exemplos dispon√≠vel no meu GitHub. Acesse aqui</p>

<p>PARA SABER MAIS:</p>

<p>Java 8 Pr√°tico
Java 8 Pr√°tico: Lambdas, Streams e os novos recursos da linguagem</p>

<p>Package java.util.function
https://docs.oracle.com/javase/8/docs/api/java/util/function/package-summary.html</p>
:ET