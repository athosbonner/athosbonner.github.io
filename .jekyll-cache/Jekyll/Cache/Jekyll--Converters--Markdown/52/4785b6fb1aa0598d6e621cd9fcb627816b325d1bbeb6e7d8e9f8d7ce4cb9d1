I"—&<p>Esta √© a segunda parte da nossa saga de posts sobre a API Stream, incorporada no Java 8.</p>

<p>Hoje vamos trabalhar com Cole√ß√µes de dados e mostrar um pouco do que o Stream √© capaz.</p>

<p>Vamos come√ßar convertendo o Stream em lista com o Stream.collect().
Stream.collect( Collectors.toList() )
Usando .Collect para converver um Stream em Lista</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    List&lt;Integer&gt; lista = new ArrayList&lt;&gt;();

    //Convertendo lista para Stream
    Stream&lt;Integer&gt; stream = lista.stream();

    //Convertendo Stream em Lista
    List&lt;Integer&gt; convertendoParaLista = stream.collect(Collectors.toList());
</code></pre></div></div>

<p>System.out.println(convertendoParaLista);</p>

<p>Agora vamos converter uma Stream em Array.
        Stream.toArray( )</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    List&lt;Integer&gt; lista = new ArrayList&lt;&gt;();

    Stream&lt;Integer&gt; stream = lista.stream();

    //Convetendo Stream em Array com a classe toArray passando o tipo do array.
    Integer[] convetendoStreamEmArray = stream.toArray(Integer[]::new);

    System.out.println(convetendoStreamEmArray);
</code></pre></div></div>

<p>N√£o podemos negar que √© muito simples e f√°cil.
Retornando lista sem dados repetidos ‚Äì Stream.distinct()
Uma das funcionalidades que eu mais gosto √© o distinct(), me salvou na primeira vez que precisei.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    List&lt;Integer&gt; lista = new ArrayList&lt;&gt;();
    lista.add(1);
    lista.add(2);
    lista.add(3);
    lista.add(4);
    lista.add(4);

    Stream&lt;Integer&gt; stream = lista.stream();

    //Converendo Stream em lista sem repetidos
    List&lt;Integer&gt; listaSemRepetidos = stream.distinct().collect(Collectors.toList());

    //Imprimindo todos os dados da lista.
    listaSemRepetidos.forEach(System.out::println);
</code></pre></div></div>

<p>Resultado:</p>

<p>1
2
3
4</p>

<p>Opera√ß√µes Intermedi√°rias
Dentro do Stream temos algumas fun√ß√µes que nos ajuda a fazer uma pesquisa mais completa dentro de uma lista.
Stream.filter()</p>

<p>Abaixo estamos usando o m√©todo filter do Stream, estou trazendo uma contagem de quantos homens de ferro existem na lista.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    List&lt;String&gt; lista = new ArrayList&lt;&gt;();
    lista.add("Homemerro");
    lista.add("Doutoranho");
    lista.add("Capit√£oica");
    lista.add("Vi√∫vaa");
    lista.add("Homemerro");
    lista.add("ThorStream&lt;String&gt; stream = lista.stream();

    long hero = stream.filter((item) -&gt; item.equals("Homem de Ferro")).count();

    System.out.println(hero);
</code></pre></div></div>

<p>Resultado:</p>

<p>2</p>

<p>Stream.map()
Com o map() podemos fazer manipula√ß√£o dos dados em quest√£o.
A seguir estou convertendo os objetos que est√£o sendo processados para mai√∫sculo, mas podemos fazer qualquer tipo de opera√ß√£o.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    List&lt;String&gt; lista = new ArrayList&lt;&gt;();
    lista.add("Homemerro");
    lista.add("Doutoranho");
    lista.add("Capit√£oica");
    lista.add("Vi√∫vaa");
    lista.add("ThorStream&lt;String&gt; stream = lista.stream();

    stream.filter((item) -&gt; item.equals("Homem de Ferro")).map(String::toUpperCase).forEach(System.out::println);
</code></pre></div></div>

<p>Resultado:</p>

<p>HOMEM DE FERRO</p>

<p>Outro exemplo</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    List&lt;String&gt; lista = new ArrayList&lt;&gt;();
    lista.add("Homemerro");
    lista.add("Doutoranho");
    lista.add("Capit√£oica");
    lista.add("Vi√∫vaa");
    lista.add("ThorStream&lt;String&gt; stream = lista.stream();

    stream.filter((item) -&gt; item.equals("Homem de Ferro")).map((item) -&gt;{

    //Se esse for o home de ferro ent√£o fa√ßa alguma coisa
    if (item.equals("Homem de Ferro")) {
    item += " - Esse √© o Tony Stark";
    }

    //Retornando o dado tratado.
    return item;

    }).forEach(System.out::println);

    }
</code></pre></div></div>

<p>Resultado :</p>

<p>Homem de Ferro - Esse √© o Tony Stark</p>

<p>Stream.sorted()
O Sorted() retorna os dados em ordem alfab√©tica, mas voc√™ pode usar um comparator para personalizar essa ordena√ß√£o se for o caso.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    List&lt;String&gt; lista = new ArrayList&lt;&gt;();
    lista.add("Homemerro");
    lista.add("Doutoranho");
    lista.add("Capit√£oica");
    lista.add("Vi√∫vaa");
    lista.add("ThorStream&lt;String&gt; stream = lista.stream();

    stream.sorted().map(String::toUpperCase).forEach(System.out::println);
</code></pre></div></div>

<p>Resultado:</p>

<p>CAPIT√ÉO AMERICA
DOUTOR ESTRANHO
HOMEM DE FERRO
THOR
VI√öVA NEGRA</p>

<p>Terminal operations
Opera√ß√µes de terminal produzem um resultado n√£o-fluxo, como valor primitivo, uma coleta ou nenhum valor.
As opera√ß√µes de terminal s√£o normalmente precedidas por opera√ß√µes intermedi√°rias que retornam outro fluxo que permite que as opera√ß√µes sejam conectadas em uma forma de consulta.
Stream.collect ()
Esse m√©todo retorna uma lista a partir de uma Stream, j√° usamos antes.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    List&lt;Integer&gt; lista = new ArrayList&lt;&gt;();

    //Convertendo lista para Stream
    Stream&lt;Integer&gt; stream = lista.stream();

    //Convertendo Stream em Lista
    List&lt;Integer&gt; convertendoParaLista = stream.collect(Collectors.toList());

    System.out.println(convertendoParaLista);

    Stream.forEach () O m√©todo forEach() percorre cada elemento da lista, voc√™ pode fazer opera√ß√µes dos objetos com a express√µes lambda √© uma forma simplificada de escrever um loop.

    List&lt;Integer&gt; lista = new ArrayList&lt;&gt;();
    lista.forEach(System.out::println);
</code></pre></div></div>

<p>Como podemos ver no java 8, dentro de cada cole√ß√£o de dados temos um m√©todo forEach para percorrer todo os objetos da lista.
Stream.match ()
O m√©todo match() tamb√©m √© um dos meus preferidos, ele vai retornar boolean quando uma determinada opera√ß√£o for satisfat√≥ria, abaixo mostro tr√™s exemplos com os m√©todos, anyMatch(), allMatch(), nomeMatch()</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    List&lt;String&gt; lista = new ArrayList&lt;&gt;();
    lista.add("HOMEMERRO");

    boolean retorno = true;
    //Usando anyMatch, retorna true se item for iqual a HOMEN DE FERRO
    retorno = lista.stream().anyMatch((item)-&gt; item.equals(‚ÄúHOMEM DE FERRO‚Äù));
    System.out.println(retorno);
    //Retorna true se item come√ßar com a letra A
    retorno = lista.stream().allMatch((item) -&gt; item.startsWith(‚ÄúA‚Äù));
    System.out.println(retorno);
    //Retorna true se o item n√£o corresponder a condi√ß√£o.
    retorno = lista.stream().noneMatch((item)-&gt; item.endsWith(‚Äúg‚Äù));

    System.out.println(retorno);
</code></pre></div></div>

<p>Resultado:</p>

<p>true
false
true</p>

<p>Stream.count ()
O m√©todo count() tamb√©m j√° usamos aqui, ele simplesmente retorna a quantidade de item de uma lista e estamos usando em conjunto com o m√©todo filter para fazer uma pesquisa mais completa dentro da lista.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    List&lt;String&gt; lista = new ArrayList&lt;&gt;();
    lista.add("HOMEMERRO");
    lista.add("HOMEMERRO");
    lista.add("HOMEMERRO");

    long resultado = lista.stream().filter((item) -&gt; item.equals(‚ÄúHOMEM DE FERRO‚Äù)).count();

    System.out.println(resultado);
</code></pre></div></div>

<p>Resultado:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>3

    Stream.reduce ()
</code></pre></div></div>

<p>O reduce() realiza uma redu√ß√£o dos elementos de um fluxo com uma fun√ß√£o especificada e retorna um Optional()  com o valor reduzido.</p>

<p>√â equivalente a express√£o:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    boolean foundAny = false;
        T result = null;
        for (T element : this stream) {
            if (!foundAny) {
                foundAny = true;
                result = element; } else result = accumulator.apply(result, element); } return foundAny ? Optional.of(result) : Optional.empty(); }
</code></pre></div></div>

<p>Exemplo de utiliza√ß√£o do reduce(), estou usando para somar todos os valores da minha lista de tipo Integer.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    List&lt;Integer&gt; lista = new ArrayList&lt;&gt;();
    lista.add(1);
    lista.add(2);
    lista.add(3);

    //Somando todos os valores da lista.
    Optional&lt;Integer&gt; reduced = lista.stream().reduce((s1,s2) -&gt; s1 + s2);

    //Imprimindo se for satisfat√≥ria
    reduced.ifPresent(System.out::println);
</code></pre></div></div>

<p>Resultado:</p>

<p>6</p>

<p>Como podemos ver, a API Stream do java 8 nos ajuda muito, com pouco c√≥digo fazemos muito.</p>

<p>Essa foi a segunda parte da saga API Stream Java 8.</p>

<p>Espero ter ajudado.</p>

<p>See you later‚Ä¶</p>

<p>Download dos exemplos desse post e do primeiro no meu GitHub. Acesse aqui</p>

<p>PARA SABER MAIS:</p>

<p>Java 8 Stream API
https://howtodoinjava.com/java8/java-streams-by-examples/</p>

<p>Documentation java.util.Stream
https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html</p>

<p>Java Code Examples for java.util.stream.Stream.builder();
https://www.programcreek.com/java-api-examples/?class=java.util.stream.Stream&amp;method=builder</p>
:ET