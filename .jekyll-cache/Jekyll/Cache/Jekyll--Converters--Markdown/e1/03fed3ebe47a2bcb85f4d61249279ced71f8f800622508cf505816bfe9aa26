I"$<p>Fala galera, tudo bem ?</p>

<p>Neste tutorial irei mostrar como disponibilizar um endpoint com os Framework:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Spring web
JPA
Rest Repository
</code></pre></div></div>

<p>Para esse tutorial vamos usar o spring start io para criar um projeto no Spring com os Framework em quest√£o.</p>

<p>O projeto criado nesse site vem com as classes de configura√ß√£o do Spring, ent√£o n√£o precisamos nos preocupar com isso.</p>

<p>Vamos come√ßar acessando o site spring start io e criando um projeto como mostra a imagem abaixo.</p>

<p>Exportando do Spring IO</p>

<p><img src="/athosbonner.github.io/assets/img/1-spring_boot.png" alt="I and My friends" /></p>

<p>Imagem 1</p>

<p>Para nosso exemplo foi escolhido um projeto com Maven, Java e as depend√™ncias do Spring Web, JPA, Rest Repository.</p>

<p>Para esse tutorial n√£o vamos usar nenhum banco de dados, por√©m voc√™ pode usar qualquer um de sua prefer√™ncia.</p>

<p>A vers√£o que estou usando do java √© a 8, mas temos a op√ß√£o de usar at√© a 13 que nesse momento √© a mais atual.</p>

<p>Feito isso, apenas iremos importar como um projeto Maven na sua IDE de prefer√™ncia, no meu caso estou usando a do pr√≥prio Spring ‚Äì Spring tools na vers√£o 4 .</p>

<p>IDE_projeto_importado</p>

<p><img src="/athosbonner.github.io/assets/img/2-spring_boot.png" alt="I and My friends" /></p>

<p>Imagem 2</p>

<p>Esse √© o projeto importado no Spring Tools 4.</p>

<p>A classe CrudApplication.java tem um m√©todo main() conforme abaixo.</p>

<p>public static void main(String[] args) {
       SpringApplication.run(CrudApplication.class, args);
}</p>

<p>Ele √© o respons√°vel por inicializar seu projeto.</p>

<p>Agora √© hora de colocar a m√£o na massa.</p>

<p>Nosso projeto ter√° dois beans e duas interfaces que ser√£o Autor e Livro.</p>

<p>Beans:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Autor.java
Livro.java
</code></pre></div></div>

<p>E iremos criar os reposit√≥rios dos beans.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>AutorRepository.java
LivroRepository.java
</code></pre></div></div>

<p>E por fim, iremos criar nossa classe que ser√° o Controller para disponibilizar o EndPoint.</p>

<p>Ent√£o nossos beans ficaram assim.</p>

<p>OsBens</p>

<p><img src="/athosbonner.github.io/assets/img/3-spring_boot.png" alt="I and My friends" /></p>

<p>Imagem 3</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.validation.constraints.NotBlank;
</code></pre></div></div>

<p>O c√≥digo para voc√™ copiar.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@Entity //Indica que essa classe tamb√©m √© uma tabela no banco de dados
public class Autor {

@Id
@GeneratedValue(strategy = GenerationType.IDENTITY)
private Long id;
@NotBlank
private String nome;

 

import java.util.HashSet;
import java.util.Set;

import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.ManyToMany;
import javax.validation.Valid;
import javax.validation.constraints.Min;
import javax.validation.constraints.NotBlank;

@Entity
public class Livro {

@Id
@GeneratedValue(strategy = GenerationType.IDENTITY)
private Long id;

@NotBlank
private String titulo;

@NotBlank
private String descricao;

@Min(30)
private Integer numeroPagina;

@Valid
@ManyToMany(fetch = FetchType.EAGER)
private Set&lt;Autor&gt; autores = new HashSet&lt;&gt;();

public void add(Autor autor) {
autores.add(autor);
}
</code></pre></div></div>

<p>Agora que temos nossos beans criados, precisamos criar nossas interfaces e cada interface ir√° estender a Classe CrudRepository √© com essa classe que o Spring saber√° qual bean ele est√° tratando e poder√° trabalhar ‚Äúautomagicamente‚Äù em qualquer opera√ß√£o de CRUD que queiramos usar.</p>

<p>interfaces</p>

<p><img src="/athosbonner.github.io/assets/img/4-spring_boot.png" alt="I and My friends" /></p>

<p>Imagem 4</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import org.springframework.data.repository.CrudRepository;
import com.br.crud.rest.crud.model.Livro;

public interface LivroRepository extends CrudRepository&lt;Livro, Long&gt;{

}



import org.springframework.data.repository.CrudRepository;

import com.br.crud.rest.crud.model.Autor;

public interface AutorRepository extends CrudRepository&lt;Autor, Long&gt; {
    
}
</code></pre></div></div>

<p>Como podemos perceber √© muito simples, estendendo a classe CrudRepository.java estamos avisando ao Spring que o bean que ele est√° tratando √© o passado por par√¢metro ao CrudRepository&lt;Autor, Long&gt;.</p>

<p>Agora que temos nossos beans e interfaces criadas √© hora de criar a classe que ir√° disponibilizar o endpoint.</p>

<p>Aproveitei a classe de configura√ß√£o do Spring para criar um m√©todo que ir√° ser anotado com o @PostController.</p>

<p>ProjetoFinal</p>

<p><img src="/athosbonner.github.io/assets/img/5-spring_boot.png" alt="I and My friends" /></p>

<p>Imagem 5</p>

<p>Depois de criado √© s√≥ inicializar o servidor e acessar o endere√ßo http://localhost:8080/ ver√° a imagem abaixo em seu navegador.</p>

<p>Perceba que ele disponibiliza os nossos beans criados e se voc√™ acessar um desses links ver√° o objeto que setamos na imagem 5.</p>

<p>localhost</p>

<p><img src="/athosbonner.github.io/assets/img/6-spring_boot.png" alt="I and My friends" /></p>

<p>Imagem 6</p>

<p>Livros</p>

<p><img src="/athosbonner.github.io/assets/img/7-spring_boot.png" alt="I and My friends" /></p>

<p>Imagem 7</p>

<p>Por padr√£o o RestRepository cria o profile/, mas o que tem nele ?</p>

<p>Se acessarmos o endere√ßo http://localhost:8080/profile/autors ver√° toda as meta-informa√ß√µes do autors conforme exemplo na imagem abaixo.</p>

<p>profile</p>

<p><img src="/athosbonner.github.io/assets/img/8-spring_boot.png" alt="I and My friends" /></p>

<p>Imagem 8</p>

<p>Realmente foi muito f√°cil.</p>

<p>Criar um endpoint com Spring √© muito f√°cil e r√°pido ajudando assim a vida do programador, para melhorar a seguran√ßa podemos usar o Spring Security, tamb√©m adicionar um banco de dados e usar o Hibernate para mapear as tabelas.</p>

<p>Esse foi um pequeno exemplo do poder desta ferramenta que tem muito mais a ser explorada.</p>

<p>Se tem alguma coisa a corrigir ou acrescentar, deixa nos coment√°rios aqui que vai ser de boa ajuda.</p>

<p>Todo o c√≥digo est√° no gitHub acessa l√° e baixa para testar.</p>

<p>Baixar o c√≥digo no meu gitHub</p>

<p>Espero ter ajudado.</p>

<p>See you later‚Ä¶.</p>
:ET