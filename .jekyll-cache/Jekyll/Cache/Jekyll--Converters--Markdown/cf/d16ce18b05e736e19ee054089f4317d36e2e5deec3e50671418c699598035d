I"Ô<p>O java 8 trouxe muitas mudan√ßas, j√° vimos aqui algumas, como Interfaces Funcionais ou em Stream parte 1 e Stream parte 2.</p>

<p>Mas uma delas que pouco √© comentada e que chamou muita minha aten√ß√£o foi a classe Optional.</p>

<p>Essa classe, encapsula o retorno de m√©todos e verificar se um valor do tipo <T> existe ou n√£o em um objeto.</T></p>

<p>Com isso podemos evitar o t√£o conhecido e chato NullpointerException.</p>

<p>Tamb√©m n√£o vamos mais precisar fazer verifica√ß√µes do tipo: if (client != null).</p>

<p>E o melhor o seu c√≥digo ir√° ficar mais simples, limpo e f√°cil.</p>

<p>Abaixo mostro alguns m√©todos que ele possui.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>empty ‚Äì Retorna uma inst√¢ncia vazia do Optional.

Mot√≥do: public static &lt;T&gt; Optional&lt;T&gt; empty‚Äã()

Implemeta√ß√£o:

  Optional&lt;String&gt; op = Optional.empty();

ofNullable ‚Äì Se n√£o for nulo, retorna o valor, caso contr√°rio retorna um Optional vazio.

M√©todo:  public static &lt;T&gt; Optional&lt;T&gt; ofNullable‚Äã(T value)

Implemeta√ß√£o:

String conta = null;		
Optional&lt;String&gt; receber = Optional.ofNullable(conta);

of ‚Äì Retorna um Optional com o valor se o mesmo n√£o for nulo.

M√©todo: public static &lt;T&gt; Optional&lt;T&gt; of‚Äã(T value)

Implementa√ß√£o:

 Optional&lt;String&gt; pegar = Optional.of(conta);

isPresent ‚Äì Retorna true se existir o valor, caso contr√°rio retorna false.

M√©todo: public boolean isPresent‚Äã()

Implementa√ß√£o:

Optional&lt;String&gt; pegar = Optional.of(conta);		
if(pegar.isPresent()) {
	System.out.println("Haloo");
}

filter ‚Äì Se existir valor e for correspondente a condi√ß√£o especificada √© retornado um Optional com o valor, caso contr√°rio retorna um Optional vazio.
veja mais aqui sobre o filter.

M√©todo: public Optional&lt;T&gt; filter‚Äã(Predicate&lt;? super T&gt; predicate)

Implementa√ß√£o:

String numeroConta = pegar.filter((conta) -&gt; conta.equals("123456")).get();

ifPresent ‚Äì Se existir valor executa a a√ß√£o determinada com esse valor verificado, caso contr√°rio, n√£o faz nada.

M√©todo: public void ifPresent‚Äã(Consumer&lt;? super T&gt; action)

Implementa√ß√£o:

pegar.ifPresent((item)-&gt;item.replace("Guaran√°", "barrio de chop"));

get ‚Äì Se o valor existir, retorna o valor, caso contr√°rio √© lan√ßado uma exce√ß√£o do tipo NoSuchElementException

M√©todo: public T get‚Äã()

Implementa√ß√£o:

Optional&lt;String&gt; heroi = Optional.of(homenDeFerro);
String definirAcoes = heroi.get();

map ‚Äì Se existir o valor, retorna um Optional com o resultado da aplica√ß√£o usada na condi√ß√£o do map, caso contr√°rio, retorna um Optional vazio.
J√° mostrei como funciona o map aqui em outro post.

M√©todo: public &lt;U&gt; Optional&lt;U&gt; map‚Äã(Function&lt;? super T,? extends U&gt; mapper)

implementa√ß√£o:

Optional&lt;String&gt; pegar = Optional.of(homenDeFerro).map(String::toUpperCase);
</code></pre></div></div>

<p>Bom galera, esses s√£o alguns dos m√©todos que a classe nos proporciona, mas usem com modera√ß√£o, saiba tratar bem as valida√ß√µes e informar as mensagens dos erros corretos.</p>

<p>Quis mostrar um pouco do poder dessa classe implementada no java 8, espero que tenha ajudado.</p>

<p>Se tem alguma coisa a corrigir ou acrescentar, deixa nos coment√°rios aqui que vai ser de boa ajuda.</p>

<p>Espero ter ajudado.</p>

<p>See you later‚Ä¶</p>

<p>PARA SABER MAIS:</p>

<p>https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html#orElseGet-java.util.function.Supplier-</p>
:ET